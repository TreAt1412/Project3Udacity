name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images/*

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: MyAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: '44a3aa55-dd13-4542-ad93-9ac0e8018eea'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  subscription : ''
  applicationname : 'webapp-anhdv29'
  backendServiceArm : 'AzureServiceConnection'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build_Infrastructure
  jobs:
  - job: BuildInfrastructure
    steps:
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.9.2'
    
    - task: TerraformCLI@1
      displayName: 'Terrafom init'
      inputs: 
        command: 'init'
        # commandOptions: 
        #   -reconfigure
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstateanhdv29'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'  
    - task: TerraformCLI@1
      displayName: Terraform validate
      inputs:
        command: 'validate'
    - task: InstallSSHKey@0
      inputs:
        #TODO 
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=' # variable value
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZh96qgJ7H+fp6YHH778AccctRGt2TB/welQRNP/RtChkQ6nHxFVP4s7gfbWwzPJLU4KMnTkKTna3GmMDmj7MuFURJRnWTwMhDLZkK4wL97kb2u4/FERZb9c8fERaoMn8HEUyMDeppyYsogD9CAofvzrte+5in/g0gO+YvB3dUfLos4BN+fxHu7mnRtBCwXwH1q4LS3ASmv+IP9kBz9a3FPNYaxmcM8gJZ21ejdIzEHsthqDvNC8X9Dv7akmHflmlp0Tw08d4Ag/X97mRGj7O3qlu6luKIuS9c+68ADXaxbtRTyy4VKshzosVCqzmaLYMubC/5THvT62TVTcHVH9al dovietanh74@gmail.com'            # variable value
        sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops

    - task: Bash@3
      displayName: Copy terraform.tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
    # - task: Bash@3
    #   displayName: fix terraform apply
    #   inputs:
    #     targetType: 'inline'
    #     script: terraform state push errored.tfstate
    #     workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
    # - task: TerraformCLI@1
    #   displayName: Terraform Destroy
    #   inputs:
    #     command: 'destroy'
    #     commandOptions:
    #       -auto-approve
    #       -lock=false
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: TerraformCLI@1
      displayName: Terraform apply
      inputs:
        command: 'apply'
        commandOptions: 
          -lock=false
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      retryCountOnTaskFailure: 3
      condition: succeededOrFailed()
    - script: |
        terraform state push errored.tfstate
      condition: failed()

# Build fake app
- stage: BuildFakeRestAPI
  jobs:
  - job: 'BuildFakeapp'
    displayName: 'Build Fake app Rest API'
    pool:
      name: MyAgentPool
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: fakerestapi
# Deploy fake app

- stage: DeployFakeApp
  dependsOn: BuildFakeRestAPI
  condition: succeeded()
  jobs:
  - deployment: FakeRestAPI
    pool:
      # vmImage: 'Ubuntu-18.04'
      name: MyAgentPool
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(applicationname)
              appType: webApp
              package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip

# Build Test
- stage: Build_Test
  jobs:
  - job: Build
    pool:
      # vmImage: 'ubuntu-18.04'
      name: 'MyAgentPool'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive Postman tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
      displayName: 'Upload Postman Tests'
      artifact: postman

    - task: ArchiveFiles@2
      displayName: 'Archive Jmeter tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip
      displayName: 'Upload JMeter Tests'
      artifact: jmeter

# run test
- stage: RunTests     
  jobs:
  - deployment: UITests
    displayName: 'UI Tests'
    pool:
      # vmImage: 'ubuntu-18.04'
      name: MyAgentPool
    environment:  'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download selenium
            artifact: drop-uitests 
          ####################################################################
          #                       Selenium Test                              #
          ####################################################################
          - task: Bash@3
            displayName: 'Install Selenium'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install selenium
                cd ~/
                DIR=/home/azuredevops/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/azuredevops/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo mv chromedriver /usr/bin/chromedriver
                    sudo chown root:root /usr/bin/chromedriver
                    sudo chmod +x /usr/bin/chromedriverq
                fi
                export PATH=$PATH:/usr/bin/chromedriver

                echo "Starting Selenium Tests"
                mkdir -p $(Pipeline.Workspace)/drop-uitests/log/selenium
                python3 login.py > $(Pipeline.Workspace)/drop-uitests/log/selenium/selenium.log
                ls $(Pipeline.Workspace)/drop-uitests/log/selenium
                echo "Completed Selenium Tests. Check selenium.log for results."
                sudo cat $(Pipeline.Workspace)/drop-uitests/log/selenium/selenium.log
                sudo mkdir -p /var/log
                sudo cp $(Pipeline.Workspace)/drop-uitests/log/selenium/selenium.log /var/log/selenium.log
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Result logs
            inputs:
              targetPath: '$(Pipeline.Workspace)/drop-uitests/log/selenium/selenium.log'
              artifactName: 'drop-selenium-logs'
          # ####################################################################
          # #                       Postman  Test                              #
          # ####################################################################
          - download: current
            displayName: Download postman
            artifact: postman
          - task: NodeTool@0
            displayName: Install Node v16.X
            inputs:
              versionSpec: '16.x'
          - task: Bash@3
            displayName: 'Install newman'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt install nodejs npm -y
                nodejs --version
                npm install -g newman
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: 'newman run ValidationTest.postman_collection.json -e variable.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

          - task: CmdLine@2
            displayName: Regression Test webapp-anhdv29
            inputs:
              script: 'newman run RegressionTest.postman_collection.json -e variable.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
            continueOnError: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
              mergeTestResults: true
              testRunTitle: 'Postman Test Result'
           
          ###################################################################
          #                     JMeter   Test                              #
          ###################################################################
          - download: current
            displayName: Download JMeter
            artifact: jmeter
          - task: Bash@3
            displayName: Install JMeter and Run Test
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt install curl -y
                sudo apt-get -y install zip
                sudo apt install -y default-jre
                sudo apt install -y default-jdk
                sudo apt-get -y install zip

                wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz"
                tar -xf apache-jmeter-5.6.2.tgz
                unzip -o $(Build.BuildId)-jmeter-tests -d .
                ./apache-jmeter-5.6.2/bin/jmeter -n -t StressTestSuite.jmx \
                                          -l log/jmeter/stress-test-result.csv \
                                          -e -f -o log/jmeter/stress-test-html-report \
                                          -j log/jmeter/jmeter-stress-test.log
                ./apache-jmeter-5.6.2/bin/jmeter -n -t EnduranceTestSuite.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter/endurance-test-html-report \
                                          -j log/jmeter/jmeter-endurance-test.log
              workingDirectory:  $(Pipeline.Workspace)/jmeter
          - task: ArchiveFiles@2
            displayName: Archive JMeter test HTML report
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/jmeter/log/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/jmeter/log/jmeter-$(Build.BuildId).zip'
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: '$(Pipeline.Workspace)/jmeter/log/jmeter-$(Build.BuildId).zip'
              artifactName: 'drop-jmeter-logs'


- stage: DestroyIaC
  displayName: Destroy IaC
  jobs:
  - job: Destroy_Azure_IaC
    displayName: Destroy Azure IaC
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
        #TODO 
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZh96qgJ7H+fp6YHH778AccctRGt2TB/welQRNP/RtChkQ6nHxFVP4s7gfbWwzPJLU4KMnTkKTna3GmMDmj7MuFURJRnWTwMhDLZkK4wL97kb2u4/FERZb9c8fERaoMn8HEUyMDeppyYsogD9CAofvzrte+5in/g0gO+YvB3dUfLos4BN+fxHu7mnRtBCwXwH1q4LS3ASmv+IP9kBz9a3FPNYaxmcM8gJZ21ejdIzEHsthqDvNC8X9Dv7akmHflmlp0Tw08d4Ag/X97mRGj7O3qlu6luKIuS9c+68ADXaxbtRTyy4VKshzosVCqzmaLYMubC/5THvT62TVTcHVH9al dovietanh74@gmail.com'
        sshKeySecureFile: 'id_rsa'
    - task: Bash@3
      displayName: Copy terraform.tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.9.2'
    
    - task: TerraformCLI@1
      displayName: Terraform Init
      inputs:
        command: 'init'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstateanhdv29'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    - task: TerraformCLI@1
      displayName: Terraform Apply
      inputs:
        command: 'destroy'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
