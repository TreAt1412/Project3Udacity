name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images/*

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
# pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  subscription : ''
  applicationname : 'webapp-anhdv29'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build_Infrastructure
  jobs:
  - job: BuildInfrastructure
    steps:
    # --------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformCLI@1
      displayName: 'Terrafom init'
      inputs: 
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstateanhdv29'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # ToDo: Run Terraform Validate    
    - task: TerraformCLI@1
      displayName: Terraform validate
      inputs:
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'htnb' # variable value
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDpU8He6o8yd6cBKEtoFkgGxgqxIy5abDrtUke+3VJYRu45iK1qIVzL5hH6SaucUbGSKpJeke5p15vfLFKpno9iXowTQGuDBWLw73p49c0E8M+mRjrPAlwGCAlIBF1Wbl5WiaBj1BH15J9FLV93qCs7XlDOVRDhz9ibtQAPzfQEcH8XKjiQaBgKmYKfc1kZ6xSwIg5SxZ0XMPYlY6r7YLsNVx+R+1lqcpB9Q0S8uayl+ewbcizoRJTWJ9z3lbA39PSLqOb+nJ0FyX5HsEnzgWwfyWHyCv88hRuFTpU2yVS8PYYxOincq6/yaz3yqqBG62lON5Z7jbbG9sqCoquMgdVY0g0N9huXscb/whjNbYFrI9OBQHtqWOnqb8N7650y8GVn4ir71J5VTCPlBcx5tE1lz3UexSxj5vmtqUdf1rk0z8JG+h9LktVzHhUF3n0vmn4ctdtpJy4m75+HsVzGpsD8obk/yOBVCktDC+OTe8wZRn3MmgXoJxp3oNBzyd5NtmE= htnb8@HTNB        '            # variable value
        sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 
      inputs:
        secureFile: "id_rsa.pub"
    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@1
      displayName: Terraform apply
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
# Build fake app
- stage: BuildFakeRestAPI
  jobs:
  - job: 'BuildFakeapp'
    displayName: 'Build Fake app Rest API'
    pool:
      name: myAgentPool
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: fakerestapi
# Deploy fake app

- stage: DeployFakeApp
  dependsOn: BuildFakeRestAPI
  condition: succeeded()
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
      name: myAgentPool
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip

# Build Test
- stage: Build_Test
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-18.04LTS'
      name: 'myAgentPool'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive Selenium tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip
      displayName: 'Upload Selenium Tests'
      artifact: selenium

    - task: ArchiveFiles@2
      displayName: 'Archive Postman tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
      displayName: 'Upload Postman Tests'
      artifact: postman

    - task: ArchiveFiles@2
      displayName: 'Archive Jmeter tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip
      displayName: 'Upload JMeter Tests'
      artifact: jmeter

# run test
- stage: RunTests     
  jobs:
  - deployment: UITests
    displayName: 'UI Tests'
    pool:
      vmImage: 'ubuntu-18.04'
      name: myAgentPool
    environment:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download selenium
            artifact: selenium 
          ####################################################################
          #                       Selenium Test                              #
          ####################################################################
          - task: Bash@3
            displayName: 'Install Selenium'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                sudo python3 -m pip install --upgrade pip
                sudo pip3 install selenium==3.141.0 
                export PATH=$PATH:/usr/lib/chromium-browser/
                cd $(Pipeline.Workspace)/automatedtesting/selenium
                unzip -o $(Pipeline.Workspace)/automatedtesting/selenium/$(Build.BuildId)-selenium-tests -d .
          - bash: |
              cd $(Pipeline.Workspace)/automatedtesting/selenium
              rm -rf seleniumtestrun.log
              pwd
              python3 login.py
              ls -lah
              sudo cat seleniumtestrun.log
              sudo cp seleniumtestrun.log /var/log/selenium/
            displayName: Run Selenium Test-Suite
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Result logs
            inputs:
              targetPath: '$(Pipeline.Workspace)/automatedtesting/selenium/seleniumtestrun.log'
              artifactName: 'SeleniumTestResult'
          # ####################################################################
          # #                       Postman  Test                              #
          # ####################################################################
          - download: current
            displayName: Download postman
            artifact: postman
          - task: NodeTool@0
            displayName: Install Node v16.X
            inputs:
              versionSpec: '16.x'
          - task: Bash@3
            displayName: 'Install newman'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt install nodejs npm -y
                nodejs --version
                npm install -g newman
                cd $(Pipeline.Workspace)/postman
                unzip -o $(Pipeline.Workspace)/postman/$(Build.BuildId)-postman-tests -d .
          - task: Bash@3
            displayName: Validation Test webapp-anhdv29
            inputs:
              script:  newman run automatedtesting/postman/Validation_Tests.postman_collection.json \
                          -e automatedtesting/postman/Validation_Tests_Environment.postman_environment.json \
                          --reporters cli,junit \
                          --reporter-junit-export Results/validationTestReport.xml \
                          --suppress-exit-code
              workingDirectory: '$(System.DefaultWorkingDirectory)'
           

          - task: Bash@3
            displayName: Regression Test webapp-anhdv29
            inputs:
              script: newman run automatedtesting/postman/Regression_Tests.postman_collection.json \
                     -e automatedtesting/postman/Regression_Tests_Environment.postman_environment.json \
                     --reporters cli,junit \
                     --reporter-junit-export Results/regressionTestReport.xml \
                     --suppress-exit-code
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            
          

          - task: PublishTestResults@2
            displayName: Publish Test Reports
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'
           
          ###################################################################
          #                     JMeter   Test                              #
          ###################################################################
          - download: current
            displayName: Download JMeter
            artifact: jmeter
          - task: Bash@3
            displayName: Install JMeter
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get install openjdk-11-jre-headless -y
                wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
                tar -xzvf jmeter.tgz

                cd $(Pipeline.Workspace)/automatedtesting/jmeter
                unzip -o $(Pipeline.Workspace)/automatedtesting/jmeter/$(Build.BuildId)-jmeter-tests -d .
          
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/StressTestSuitev2.jmx \
                                          -l log/jmeter/stress-test-result.csv \
                                          -e -f -o log/jmeter/stress-test-html-report \
                                          -j log/jmeter/jmeter-stress-test.log
            displayName: JMeter stress test
          - bash: |
              apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTestSuitev2.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter/endurance-test-html-report \
                                          -j log/jmeter/jmeter-endurance-test.log
            displayName: JMeter endurance test
          - task: ArchiveFiles@2
            displayName: Archive JMeter stress test HTML report
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
              verbose: true
          - task: ArchiveFiles@2
            displayName: Archive JMeter endurance test HTML report
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
              artifactName: 'drop-jmeter-logs'


- stage: DestroyIaC
  displayName: Destroy IaC
  jobs:
  - job: Destroy_Azure_IaC
    displayName: Destroy Azure IaC
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'

    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCxk0N0whzgiOTrcAdHsjgfCr4+LkO7D2mo9/dDJ+Nz/wf2c+V8HYy0U4xXGoYSbGBCfjHNZzj7vmHP3nhNMabWVALOjjGDyTnb/F+hkpiwfp6vwXjjrLcyvoFv9J8VnPZXVMuA2vveVckkrAbo+a2/u425v55KWkqqNuzJIDEVT8/1FJefaE6LK/NMo1zswlGUxDn2+o2pEDGRc2S/2B/s9I0RVPFpaqVFWNnF/JmtOhetWhwZbHvXof3tXcIo6LzY2NET3FyES5TlOMhLdJaKWssAGsZfM8Nfo92yZ0LNAk8V2o4S8RCFYIiABi5yvxs4N1/Cz4uEbqnF/wF+t4N5'
        sshKeySecureFile: 'id_rsa'
     
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.2.9'
    
    - task: TerraformCLI@1
      displayName: Terraform Init
      inputs:
        command: 'init'
        backendServiceArm: 'AZServiceConnection'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstateanhdv29'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    - task: TerraformCLI@1
      displayName: Terraform Apply
      inputs:
        command: 'destroy'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'