name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images/*

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: MyAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: '5389dd33-fc42-4780-9c6d-6b596e2a9dae'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'DEV'
  applicationname : 'webapp-anhdv9'
  backendServiceArm : 'AzureServiceConnection'


stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build_Infrastructure
  jobs:
  - job: BuildInfrastructure
    steps:
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.9.2'
    
    - task: TerraformCLI@1
      displayName: 'Terrafom init'
      inputs: 
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstateanhdv29'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'  
    - task: TerraformCLI@1
      displayName: Terraform validate
      inputs:
        command: 'validate'
    - task: Bash@3
      displayName: Copy terraform.tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
 
    - task: TerraformCLI@1
      displayName: Terraform apply
      inputs:
        command: 'apply'
        commandOptions: 
          -lock=false
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      retryCountOnTaskFailure: 3
      condition: succeededOrFailed()
    - script: |
        terraform state push errored.tfstate
      condition: failed()

# Build fake app
- stage: BuildFakeRestAPI
  jobs:
  - job: 'BuildFakeapp'
    displayName: 'Build Fake app Rest API'
    pool:
      name: MyAgentPool
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        verbose: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: fakerestapi
# Deploy fake app

- stage: DeployFakeApp
  dependsOn: BuildFakeRestAPI
  condition: succeeded()
  jobs:
  - deployment: FakeRestAPI
    pool:
      # vmImage: 'Ubuntu-18.04'
      name: MyAgentPool
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(applicationname)
              appType: webAppLinux
              package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip
              deploymentMethod: zipDeploy

# Build Test
- stage: Build_Test
  jobs:
  - job: Build
    pool:
      name: 'MyAgentPool'
  - job: publishSelenium
    displayName: 'Publish Selenium'
    steps:
    - publish: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py
      artifact: selenium

    # - task: ArchiveFiles@2
    #   displayName: 'Archive Postman tests'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
    #   displayName: 'Upload Postman Tests'
    #   artifact: postman

    - task: ArchiveFiles@2
      displayName: 'Archive Jmeter tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip
      displayName: 'Upload JMeter Tests'
      artifact: jmeter

# run test
- stage: RunTests     
  jobs:
  - deployment: UITests
    displayName: 'UI Tests'
    pool:
      # vmImage: 'ubuntu-18.04'
      name: MyAgentPool
    environment:  'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download selenium
            artifact: selenium
          
           
          ###################################################################
          #                     JMeter   Test                              #
          ###################################################################
          - download: current
            displayName: Download JMeter
            artifact: jmeter
          - task: Bash@3
            displayName: Install JMeter and Run Test
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt install curl -y
                sudo apt-get -y install zip
                sudo apt install -y default-jre
                sudo apt install -y default-jdk
                sudo apt-get -y install zip

                wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz"
                tar -xf apache-jmeter-5.6.2.tgz
                unzip -o $(Build.BuildId)-jmeter-tests -d .
                ./apache-jmeter-5.6.2/bin/jmeter -n -t StressTestSuite.jmx \
                                          -l log/jmeter/stress-test-result.csv \
                                          -e -f -o log/jmeter/stress-test-html-report \
                                          -j log/jmeter/jmeter-stress-test.log
                ./apache-jmeter-5.6.2/bin/jmeter -n -t EnduranceTestSuite.jmx \
                                          -l log/jmeter/endurance-test-result.csv \
                                          -e -f -o log/jmeter/endurance-test-html-report \
                                          -j log/jmeter/jmeter-endurance-test.log
              workingDirectory:  $(Pipeline.Workspace)/jmeter
          - task: ArchiveFiles@2
            displayName: Archive JMeter test HTML report
            inputs:
              rootFolderOrFile: '$(Pipeline.Workspace)/jmeter/log/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/jmeter/log/jmeter-$(Build.BuildId).zip'
              verbose: true

          - task: PublishPipelineArtifact@1
            displayName: Publish JMeter logs
            inputs:
              targetPath: '$(Pipeline.Workspace)/jmeter/log/jmeter-$(Build.BuildId).zip'
              artifactName: 'drop-jmeter-logs'
  - job: PostmanTests
    displayName: Postman Tests
    steps: 
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x' 
        checkLatest: true
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      inputs:
        script: 'newman run automatedtesting/postman/ValidationTest.postman_collection.json -e automatedtesting/postman/variable.postman_environment.json --reporters cli,junit --reporter-junit-export Results/TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      displayName: Run Regression Tests
      inputs:
        script: 'newman run automatedtesting/postman/RegressionTest.postman_collection.json -e automatedtesting/postman/variable.postman_environment.json --reporters cli,junit --reporter-junit-export Results/TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'
  - job: SeleniumTests
    displayName: Selenium Tests
    steps:
    - task: Bash@3
      displayName: Run Selenium
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash 
          # pip3 install selenium
          # pip3 install pytest
          # pip3 install pytest-html
          # pip3 install chromedriver-py=89.0.4389.23
          # pip3 install pytest-xdist
          # pip3 install pytest-nunit
          sudo apt install python3.12-venv
          python3 -m venv ~/.myrepo
          source ~/.myrepo/bin/activate
          pip3 install selenium
          pip3 install webdriver-manager
          FILE=chromedriver_linux64.zip
          if [ -f "$FILE" ]; then
            echo "$FILE exists."
          else
            wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
          fi
          # install chrome driver
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromium-browser -version
          chromedriver --version
          python3 automatedtesting/selenium/login.py

- stage: DestroyIaC
  displayName: Destroy IaC
  jobs:
  - job: Destroy_Azure_IaC
    displayName: Destroy Azure IaC
    pool:
      name: MyAgentPool
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    - task: Bash@3
      displayName: Copy terraform.tfvars
      inputs:
        targetType: 'inline'
        script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.9.2'
    
    - task: TerraformCLI@1
      displayName: Terraform Init
      inputs:
        command: 'init'
        backendServiceArm: '$(backendServiceArm)'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstateanhdv29'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    
    - task: TerraformCLI@1
      displayName: Terraform Apply
      inputs:
        command: 'destroy'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
