name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images/

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
# pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  subscription : ''
  applicationname : 'webapp-anhdv29'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: ProvisionIAC
  jobs:
  - job: BuildInfrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBByBaEbrJf+v9agEtM6g/LruTudlDznQ/Dca0BW/awH3/lX26tI/a6kDg90tOCOZIMotbavb3ABKJfkaDvFFGtI='
        sshPublicKey: '$(udacityPubKey)'
        sshKeySecureFile: 'id_rsa'

    
    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV1@0
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'azureServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tstateanhdv29'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'AZServiceConnection'

    - task: TerraformTaskV1@0
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'AZServiceConnection'
    # Run Terraform Apply
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: |
          -auto-approve
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azureServiceConnection'
 
- stage: Build
  jobs:
    - job: Build
      pool:
        vmImage: 'ubuntu-18.04'
      steps:

        - task: ArchiveFiles@2
          displayName: "Archive FakeRestAPI"
          inputs:
            rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
            includeRootFolder: false
            archiveType: "zip"
            archiveFile: '$(Build.BuildId)-fakerestapi.zip'

        - task: PublishPipelineArtifact@1
          displayName: "Upload farestapi Package"
          inputs:
            targetPath: $(Build.BuildId)-fakerestapi.zip
            artifactName: drop-fakerestapi

        - task: ArchiveFiles@2
          displayName: "Archive Selenium UI Tests"
          inputs:
            rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
            includeRootFolder: false
            archiveType: "zip"
            archiveFile: '$(Build.BuildId)/selenium-tests.zip'
            replaceExistingArchive: true
        # - upload: $(Build.BuildId)/selenium-tests.zip
        #   artifact: selenium
        - task: PublishPipelineArtifact@1
          displayName: Upload Selenium
          inputs:
           targetPath: '$(Build.BuildId)/selenium-tests.zip'
           artifact: drop-selenium

- stage: Wait
  jobs:
    - job: RunsOnServer
      pool: Server
      steps:
      - task: Delay@1
        inputs:
          delayForMinutes: '5'

- stage: Deployments
  displayName: Deployments
  jobs:
  - deployment: FakeRestAPIDeploy
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'WEBAPP-TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'AZServiceConnection'
              appType: 'webAppLinux'
              appName: $(applicationname)
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'

  - deployment: VMDeploy
    displayName: VM Deploy
    environment:
      name:  'VM-TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Dependencies'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                # sudo apt-get upgrade -y
                # sudo apt-get install python3-pip -y
                # sudo apt-get install unzip -y
                # sudo apt-get install -y chromium-browser
                # pip3 install selenium
                
                # download chrome driver v89
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                fi
                # install chrome driver
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version
                # agent log analytics
                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ba2f2875-7939-40f7-8fab-9fdfe5774935 -s rb9iiVdW/SUHbVCH4V83NX16EgaXKTEtX7WfGSxykJ3iCaZ/Tm/FFqigsvOAUajQZM0L5k9vAnyM3lD4Iv61cw==
                sudo /opt/microsoft/omsagent/bin/service_control restart ba2f2875-7939-40f7-8fab-9fdfe5774935
          - download: current
            displayName: 'Download Selenium'
            artifact: selenium
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                sudo mkdir /var/logs
                python3 uitests.py > ui-logs.log
                sudo mv ui-logs.log /var/logs
- stage: Tests
  jobs:
  - job: Integration
    steps:
    - task: Bash@3
      displayName: 'Install Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          pwd
          sudo snap install postman
          sudo npm install -g newman
          sudo npm install newman-reporter-junitfull -g      

    - task: Bash@3
      displayName: 'Regression Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash

          newman run RegressionTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportRegression.xml
    - task: Bash@3
      displayName: 'Data Validation Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash

          newman run ValidationTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportValidation.xml

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/JUnitReport*.xml'
        testRunTitle: 'Publish test results'
        searchFolder: 'automatedtesting/postman'
  - job: Performance
    displayName: 'Performance Tests'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:

    - task: JMeterInstaller@0
      displayName: 'Install JMeter 5.2.1'
      inputs:
        jmeterVersion: '5.2.1'
    
    - task: Bash@3
      displayName: 'Endurance Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automatedtesting/jmeter/EnduranceTestSuite.jmx \
            -l endurance-test-report/endurance-results.jtl \
            -e \
            -o endurance-test-report

    - task: publishhtmlreport@1
      displayName: 'Publish Endurance Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.SourcesDirectory)/endurance-test-report'    

    - task: Bash@3
      displayName: 'Stress Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automatedtesting/jmeter/StressTestSuite.jmx \
            -l stress-test-report/stress-results.jtl \
            -e \
            -o stress-test-report

    - task: publishhtmlreport@1
      displayName: 'Publish Stress Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.SourcesDirectory)/stress-test-report'    
        
        
    - task: Bash@3
      displayName: 'Print Performance Test Logs'
      inputs:
        targetType: 'inline'
        script: |
          ls -lah endurance-test-report/
          ls -lah stress-test-report/
          cat jmeter.log        

  - deployment: Functional
    displayName: 'Functional UI Tests'
    environment:
      name:  'TEST'
      resourceType: VirtualMachine
      tags: test, packer-created-vm
    strategy:
      runOnce:
        deploy:
          steps:
          
          - download: current
            artifact: drop-ui-tests

          - task: Bash@3

            displayName: 'Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                echo 'Hello from a custom VM with pre-installed Selenium, Chromium-browser & Chromedriver!'
                source env/bin/activate
                export PATH=$PATH:`pwd` # add chromedriver executable to path
                python3 ../drop-ui-tests/functional_ui_test.py
                cat selenium.log
